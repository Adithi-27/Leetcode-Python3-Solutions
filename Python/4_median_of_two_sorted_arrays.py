# -*- coding: utf-8 -*-
"""4. Median of Two Sorted Arrays.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e3aq1aa2i1UJiZjkkhGqu7vt_BJePdUJ
"""

from typing import List

class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        # Ensure nums1 is the smaller array to minimize the number of binary search steps
        if len(nums1) > len(nums2):
            nums1, nums2 = nums2, nums1

        m, n = len(nums1), len(nums2)
        total_length = m + n
        half_length = total_length // 2

        left, right = 0, m
        while left <= right:
            i = (left + right) // 2  # Partition index for nums1
            j = half_length - i       # Partition index for nums2

            # Find the elements just around the partition
            nums1_left = nums1[i - 1] if i > 0 else float('-inf')
            nums1_right = nums1[i] if i < m else float('inf')
            nums2_left = nums2[j - 1] if j > 0 else float('-inf')
            nums2_right = nums2[j] if j < n else float('inf')

            # Check if partitions are correct
            if nums1_left <= nums2_right and nums2_left <= nums1_right:
                # Found correct partition
                if total_length % 2 == 0:
                    return (max(nums1_left, nums2_left) + min(nums1_right, nums2_right)) / 2
                else:
                    return min(nums1_right, nums2_right)
            elif nums1_left > nums2_right:
                right = i - 1
            else:
                left = i + 1